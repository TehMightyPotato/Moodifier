@page "/music"
@using MightyPotato.PnP.Moodifier.Server.Audio.Services
@using MightyPotato.PnP.Moodifier.Server.Audio.Models
@using MightyPotato.PnP.Moodifier.Server.Components
@using MightyPotato.PnP.Moodifier.Server.Audio.Interfaces
@using MightyPotato.PnP.Moodifier.Server.Services.Audio
@inject PlaylistService PlaylistService
@inject MusicPlaybackService PlaybackService

<PageTitle>Moodifier Music Player</PageTitle>
<div class="d-flex w-100 h-auto justify-content-between p-3 sticky-top">
    <div class="btn-group btn-group-lg d-inline-flex shadow">
        @if (_backStack.Count > 0)
        {
            <button type="button" class="btn btn-primary d-flex" @onclick="BackButtonClicked">
                <i class="material-symbols-outlined">arrow_back</i>
            </button>
            <button type="button" class="btn btn-secondary d-flex" @onclick="BackButtonClicked">
                <i class="material-symbols-outlined">home</i>
            </button>
        }
        else
        {
            <button type="button" class="btn btn-primary disabled d-flex" disabled>
                <i class="material-symbols-outlined">arrow_back</i>
            </button>
            <button type="button" class="btn btn-secondary disabled d-flex" disabled>
                <i class="material-symbols-outlined">home</i>
            </button>
        }
        <button type="button" class="btn btn-info d-flex" @onclick="RefreshButtonClicked">
            <i class="material-symbols-outlined">refresh</i>
        </button>
        <button type="button" class="btn btn-danger d-flex" @onclick="StopButtonClicked">
            <i class="material-symbols-outlined">stop_circle</i>
        </button>
    </div>
</div>


@if (_playlistStructure != null)
{
    <div class="container">
        <div class="row row-cols-2 row-cols-sm-2 row-cols-md-2 row-cols-lg-4">
            @foreach (var playlistElement in _currentFolder.Content)
            {
                <div class="col">
                    @if (playlistElement is Folder folder)
                    {
                        <FolderComponent FolderElement="@folder" OnClickCallback="FolderClicked"></FolderComponent>
                    }
                    @if (playlistElement is Playlist playlist)
                    {
                        <PlaylistComponent PlaylistElement="playlist" OnClickCallback="PlaylistClicked" IsPlaying="@(playlist == _playlistBeingPlayed)"></PlaylistComponent>
                    }
                </div>
            }
        </div>
    </div>
}
else
{
    <div class="spinner-border align-content-center" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
}

@code {
    private Folder _playlistStructure;

    private Folder _currentFolder = null!;

    private Playlist? _playlistBeingPlayed;

    private Stack<Folder> _backStack = null!;

    protected override void OnInitialized()
    {
        Init();
    }

    //Called from OnInitialized AND on manual refresh via RefreshButtonClicked
    private void Init()
    {
        _playlistStructure = PlaylistService.GetStructure();
        _backStack = new Stack<Folder>();
        _currentFolder = _playlistStructure;
        _playlistBeingPlayed = PlaybackService.GetCurrentPlaylist();
        PlaybackService.PlaylistChanged += (sender, element) => { _playlistBeingPlayed = element; };
    }

    private void FolderClicked(Folder folder)
    {
        _backStack.Push(_currentFolder);
        _currentFolder = folder;
    }

    private async Task PlaylistClicked(Playlist playlist)
    {
        await PlaybackService.PlayFromPlaylistAsync(playlist.Path);
    }

    private void BackButtonClicked()
    {
        _currentFolder = _backStack.Pop();
    }

    private void StopButtonClicked()
    {
        PlaybackService.StopPlayback();
    }

    private void RefreshButtonClicked()
    {
        PlaylistService.Reload();
        Init();
    }

    private void HomeButtonClicked()
    {
        _backStack.Clear();
        _currentFolder = _playlistStructure!;
    }
}