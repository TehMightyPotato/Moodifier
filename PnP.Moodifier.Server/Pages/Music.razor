@page "/music"
@using MightyPotato.PnP.Moodifier.Server.Audio.Services
@using MightyPotato.PnP.Moodifier.Server.Audio.Models
@using MightyPotato.PnP.Moodifier.Server.Components
@inject PlaylistService PlaylistService
@inject AudioPlaybackService PlaybackService

<PageTitle>Moodifier Music Player</PageTitle>
@if (_backStack != null && _backStack.Count > 0)
{
    <button type="button" class="btn btn-lg btn-primary" @onclick="BackButtonClicked"><i class="material-symbols-outlined">arrow_back</i></button>
}
else
{
    <button type="button" class="btn btn-lg btn-primary" disabled><i class="material-symbols-outlined">arrow_back</i></button>
}
@if (_playlistStructure != null)
{
    <ul>
        @foreach (var playlist in _current)
        {
            @if (playlist.MusicFiles != null && playlist.MusicFiles.Count <= 0)
            {
                <li>
                    <Folder PlaylistElement="playlist" OnClickCallback="FolderClicked"></Folder>
                </li>
            }
            else
            {
                <li>
                    <Playlist PlaylistElement="playlist" OnClickCallback="PlaylistClicked"></Playlist>
                </li>
            }
        }
    </ul>
}
else
{
    <div class="spinner-border align-content-center" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
}

@code {
    private List<PlaylistElement>? _playlistStructure;

    private List<PlaylistElement> _current = null!;

    private PlaylistElement? _playlistBeingPlayed;

#pragma warning disable CS8618
    private Stack<List<PlaylistElement>> _backStack;
#pragma warning restore CS8618

    protected override void OnInitialized()
    {
        _playlistStructure = PlaylistService.GetStructure();
        _backStack = new Stack<List<PlaylistElement>>();
        _current = _playlistStructure;
    }

    private void FolderClicked(PlaylistElement element)
    {
        _backStack.Push(_current);
        _current = element.Children!;
        StateHasChanged();
    }

    private async Task PlaylistClicked(PlaylistElement element)
    {
        _playlistBeingPlayed = element;
        await PlaybackService.PlayFromPlaylistAsync(element.Path);
    }

    private void BackButtonClicked()
    {
        _current = _backStack.Pop();
    }

}